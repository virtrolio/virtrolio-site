import { Injectable } from '@angular/core';
import { AngularFirestore, AngularFirestoreDocument } from '@angular/fire/firestore';
import { VirtrolioUser } from '../shared/interfaces';
import { take } from 'rxjs/operators';
import { AuthService } from './auth.service';

@Injectable({
  providedIn: 'root'
})
export class SharingLinkService {

  constructor(private authService: AuthService, private afs: AngularFirestore) { }

  /**
   * Generates the shareable signing link for the current user. The signing link has two query parameters that are used
   * by Angular routerLink. The first is 'uid', which is the current user's Firebase Authentication User ID.
   * The second is 'key', which is generated by AppAuthService.changeKey().
   * @returns The sharable signing link for the current user, usable by FriendLinkComponent.
   * @throws ReferenceError - If the user is not logged in
   */
  async getLink(): Promise<string> {
    await this.authService.asyncThrowErrorIfLoggedOut('get your sharing link');

    let link = 'https://virtrolio.web.app/signing?uid=';
    const user = this.authService.uid();
    link += user + '&key=';
    const userRef: AngularFirestoreDocument<VirtrolioUser> = this.afs.collection('users').doc<VirtrolioUser>(user);
    let userDoc: VirtrolioUser = await userRef.valueChanges().pipe(take(1)).toPromise();
    if (!userDoc) {
      await this.authService.createUser(this.authService.getUser());
      userDoc = await userRef.valueChanges().pipe(take(1)).toPromise();
    }
    let key = userDoc.key;
    if (typeof key === 'undefined' || !key) {
      await this.changeKey();
      key = (await userRef.valueChanges().pipe(take(1)).toPromise()).key;
    }
    link += key;
    return link;
  }

  /**
   * Verifies if the provided key matches the key for the provided user in the database.
   * Used to verify a correct link before allowing a user to sign someone else's Virtrolio.
   * @param uid - The user ID of the user to check the key against. Usually the **recipient** of the message.
   * @param key - The key provided by the sender to verify. Should be obtained from the provided 'key' query parameter
   * in the URL.
   * @returns - A promise evaluating to true if the key is correct, false if the key is incorrect.
   * @throws Error - If either argument is blank, null or undefined.
   * @throws ReferenceError - if the UID does not exist or the user is logged out.
   */
  async checkKey(uid: string, key: string): Promise<boolean> {
    if (typeof uid === 'undefined' || !uid) {
      throw new Error('Argument UID was not provided');
    } else if (typeof key === 'undefined' || !key) {
      throw new Error('Argument Key was not provided');
    }

    await this.authService.asyncThrowErrorIfLoggedOut('verify the key that you provided');

    return this.authService.userExists(uid).then(async userExists => {
      if (userExists) {
        const userRef: AngularFirestoreDocument<VirtrolioUser> = this.afs.collection('users').doc<VirtrolioUser>(uid);
        const userDoc = await userRef.valueChanges().pipe(take(1)).toPromise();
        return key === userDoc.key;
      } else {
        throw new ReferenceError('User does not exist in the \'users\' database');
      }
    });
  }

  /**
   * Replaces the current user's key with a new and randomly generated key.
   * No parameters are expected because only the key of the currently logged in user can be changed.
   * Assumes that the user is logged in (components using this method should be protected using AuthGuard)
   * @throws ReferenceError - If the user is not logged in
   */
  async changeKey(): Promise<void> {
    await this.authService.asyncThrowErrorIfLoggedOut('change your key');
    const user = this.authService.uid();
    const userRef: AngularFirestoreDocument<VirtrolioUser> = this.afs.collection('users').doc<VirtrolioUser>(user);
    const userDoc = await userRef.valueChanges().pipe(take(1)).toPromise();
    if (!('key' in userDoc)) { // This triggers if the key doesn't exist
      return userRef.update(
        { key: AuthService.generateKey() }
      );
    } else { // If the key does exist, need to make sure the new key is unique
      const oldKey = userDoc.key;
      let newKey = AuthService.generateKey();
      while (oldKey === newKey) {
        newKey = AuthService.generateKey();
      }
      return userRef.update(
        { key: newKey }
      );
    }
  }
}
